# FTPY - a simple FTP program
# Author: Muhammad-Sharif Moustafa

from ftplib import FTP
from ftplib import error_temp
from ftplib import error_perm
from getpass import getpass
from sys import exit
import os

# Global Variables
ftp = FTP()
host = ''
user = ''
password = ''
msg = ''
file = None
bindir = os.getcwd()

# Convenience Functions
def writeFileLineByLine(line):
	file.write(line)
	file.write('\n')

def writeBinary(data):
	file.write(data)

def getUserInput(msg):
	inputString = ''
	# Try the Python 2 way of getting input. If that fails
	# use the Python 3 way.
	try:
		inputString = eval("raw_input('" + msg + "')")
	except (SyntaxError, NameError):
		inputString = eval("input('" + msg + "')")
	return inputString

# Connection and Login Logic
connected = False
while not connected:
	while host.strip() == '':
		host = getUserInput('Host name (URL): ').strip()
		if (host == 'quit'):
			exit(0)
	try:
		msg = ftp.connect(host)
	except error_temp as e:
		print(e)
	except error_perm as e:
		print(e)
	else:
		connected = True
		print(msg)
loggedIn = False
while not loggedIn:
	user = getUserInput('Username (blank for anonymous): ').strip()
	password = getpass('Password (blank for anonymous): ').strip()
	try:
		msg = ftp.login(user, password)
	except error_temp as e:
		print(e)
	except error_perm as e:
		print(e)
	else:
		loggedIn = True
		print(msg)

# Command Loop
while True:
	cmd = getUserInput('Command: ').strip()
	# split command by spaces
	cmdList = cmd.split(None, 1)
	# if no commands were given, skip the loop
	if len(cmdList) == 0:
		continue
	# if there were more than one "words" in the command,
	# the words after the first one are command arguments.
	if len(cmdList) > 1:
		cmdArgs = cmdList[1]
	# parse the command
	if cmdList[0] == 'quit':
		break;
	elif cmdList[0] == 'ls':
		print(ftp.dir())
	elif cmdList[0] == 'cd':
		try:
			msg = ftp.cwd(cmdArgs)
		except error_perm as e:
			print(e)
		else:
			print(msg)
	elif cmdList[0] == 'get':
		try:
			file = open(cmdList[1], 'wb')
			ftp.retrbinary(('RETR ' + cmdArgs), writeBinary)
			file.close()
		except IOError as e:
			print('IOError: ' + str(e))
		except error_perm as e:
			print(e)
		else:
			print('Got ' + cmdArgs)
	elif cmdList[0] == 'put':
		try:
			file = open(cmdArgs, 'rb')
			ftp.storbinary('STOR ' + cmdArgs, file)
			file.close()
		except IOError as e:
			print('IOError: ' + str(e))
		except error_perm as e:
			print(e)
		else:
			print('Put ' + cmdArgs)
	elif cmdList[0] == 'mkdir':
		try:
			print(ftp.mkd(cmdArgs))
		except error_perm as e:
			print(e)
		else:
			print('Made new directory: ' + cmdArgs)
	elif cmdList[0] == 'rmdir':
		try:
			print(ftp.rmd(cmdArgs))
		except error_perm as e:
			print(e)
		else:
			print('Removed directory: ' + cmdArgs)
	elif cmdList[0] == 'pwd':
		try:
			print(ftp.pwd())
		except error_perm as e:
			print(e)
	elif cmdList[0] == 'mv':
		cmdArgsList = cmdArgs.split()
		try:
			print(ftp.rename(cmdArgsList[0], cmdArgsList[1]))
		except error_perm as e:
			print(e)
		else:
			print('Moved ' + cmdArgsList[0] + ' to ' + cmdArgsList[1])
	elif cmdList[0] == 'rm':
		try:
			print(ftp.delete(cmdArgs))
		except error_perm as e:
			print(e)
		else:
			print('Deleted ' + cmdArgs)

# Try quitting nicely. If that fails, force quit.
try:
	print(ftp.quit())
except:
	print(ftp.close())
